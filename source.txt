HTMLEntities

gem install htmlentities

----

== 1.0 (2005-08-03)
* Initial release.
* Decoding only.

----

[[ruby]]

require "htmlentities"
h = HTMLEntities.new(:xhtml1)

h.decode("&#9731;")  # => "☃"

h.decode("&#x2603;") # => "☃"

h.decode("&amp;")    # => "&"

h.decode("&ocirc;")  # => "ô"

----

[[ruby]]

h.encode("&ô☃", :basic)
# => "&amp;ô☃"

h.encode("&ô☃", :named)
# => "&amp;&ocirc;☃"

h.encode("&ô☃", :hexadecimal)
# => "&#x26;&#xf4;&#x2603;"

h.encode("&ô☃", :named, :decimal)
# => "&amp;&ocirc;&#9731;"

----

cmess (7,581)

Assist with handling messed up encodings (Currently includes the following tools: bconv, cinderella, decode_entities, guess_encoding)

----

murlsh (7,234)

Host your bookmarks or maintain a link blog

----

premailer (7,134)

Improve the rendering of HTML emails by making CSS inline, converting links and warning about unsupported code.

----

rfeedreader (10,652)

Feed parser to read feed and return first posts of this feed. Special parsing from sources like Flickr, Jumcut, Google video, ...

----

wukong (13,598)

Treat your dataset like a:

* stream of lines when it's efficient to process by lines
* stream of field arrays when it's efficient to deal directly with fields
* stream of lightweight objects when it's efficient to deal with objects

Wukong is friends with Hadoop the elephant, Pig the query language, and the cat on your command line.

----

162,858 total downloads  
 26,849 for this version

----

[[ruby]]

def decode_entities
  return gsub(HTMLEntities::NAMED_ENTITY_REGEXP) { 
    HTMLEntities::MAP.has_key?($1) ?
      [HTMLEntities::MAP[$1]].pack('U') : $& 
  }.gsub(/&#([0-9]{2,10});/) { 
    [$1.to_i].pack('U') 
  }.gsub(/&#x([0-9a-e]{2,8});/i) { 
    [$1.to_i(16)].pack('U') 
  }
end

----

[[ruby]]

def decode(source)
  prepare(source).gsub(@entity_regexp) {
    if $1 && codepoint = @map[$1]
      [codepoint].pack('U')
    elsif $2
      [$2.to_i(10)].pack('U')
    elsif $3
      [$3.to_i(16)].pack('U')
    else
      $&
    end
  }
end

----

[[ruby]]

if "1.9".respond_to?(:encoding)
  def prepare(string) #:nodoc:
    string.to_s.encode(Encoding::UTF_8)
  end
else
  def prepare(string) #:nodoc:
    string.to_s
  end
end

----

[[ruby]]

def entity_regexp
  key_lengths = @map.keys.map{ |k| k.length }
  entity_name_pattern =
    if @flavor == 'expanded'
      '(?:b\.)?[a-z][a-z0-9]'
    else
      '[a-z][a-z0-9]'
    end
  /&(?:(#{entity_name_pattern}{#{key_lengths.min - 1},#{key_lengths.max - 1}})|#([0-9]{1,7})|#x([0-9a-f]{1,6}));/i
end

----

[[ruby]]

/&(?:([a-z][a-z0-9]{1,7})|#([0-9]{1,7})|#x([0-9a-f]{1,6}));/i

def decode(source)
  prepare(source).gsub(@entity_regexp) {
    if $1 && codepoint = @map[$1]
      [codepoint].pack('U')
    elsif $2
      [$2.to_i(10)].pack('U')
    elsif $3
      [$3.to_i(16)].pack('U')
    else
      $&
    end
  }
end

----

rvm all rake test

rvm all rake benchmark

----

ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-linux]
Encoding  6.620000   0.010000   6.630000 (  6.636774)
Decoding  2.660000   0.000000   2.660000 (  2.662709)

ruby 1.8.7 (2011-02-18 patchlevel 334) [x86_64-linux]
Encoding 10.660000   0.070000  10.730000 ( 10.764171)
Decoding  4.270000   0.020000   4.290000 (  4.293326)

jruby 1.6.2 (ruby-1.8.7-p330) (2011-05-23 e2ea975)
(OpenJDK 64-Bit Server VM 1.6.0_22) [linux-amd64-java]
Encoding  5.090000   0.000000   5.090000 (  5.090000)
Decoding  1.763000   0.000000   1.763000 (  1.763000)

----

"It would be nice, however, if the decode function had a way to ignore certain common codes. For example, let's say you wanted to decode everything except the ampersand code (&amp;)."

----

"First of all I would like to thank you for this awesome gem. But I found a bug while trying to sanitize a string that has both valid and invalid chars."

----

[[ruby]]

coder = HTMLEntities.new
string = "> Car &amp; Bike <"
new = coder.encode(string)
# BUG =>  "&gt; Car &amp;amp; Bike &lt;"
worst_then_new = coder.encode(new)
# BUG => "&amp;gt; Car &amp;amp;amp; Bike &amp;lt;"

----

"On two occasions I have been asked, 'Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?' I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question."
