HTMLEntities

gem install HTMLEntities

----

[[ruby]]

require "htmlentities"
h = HTMLEntities.new(:xhtml1)

h.decode("&#9731;")
# => "☃"

h.decode("&#x2603;")
# => "☃"

h.decode("&amp;")
# => "&"

h.decode("&ocirc;")
# => "ô"

----

[[ruby]]

h.encode("&ô☃", :basic)
# => "&amp;ô☃"

h.encode("&ô☃", :named)
# => "&amp;&ocirc;☃"

h.encode("&ô☃", :hexadecimal)
# => "&#x26;&#xf4;&#x2603;"

h.encode("&ô☃", :named, :decimal)
# => "&amp;&ocirc;&#9731;"

----

[[ruby]]

def decode_entities
  return gsub(HTMLEntities::NAMED_ENTITY_REGEXP) { 
    HTMLEntities::MAP.has_key?($1) ?
      [HTMLEntities::MAP[$1]].pack('U') : $& 
  }.gsub(/&#([0-9]{2,10});/) { 
    [$1.to_i].pack('U') 
  }.gsub(/&#x([0-9a-e]{2,8});/i) { 
    [$1.to_i(16)].pack('U') 
  }
end

----

[[ruby]]

def decode(source)
  prepare(source).gsub(@entity_regexp) {
    if $1 && codepoint = @map[$1]
      [codepoint].pack('U')
    elsif $2
      [$2.to_i(10)].pack('U')
    elsif $3
      [$3.to_i(16)].pack('U')
    else
      $&
    end
  }
end

----

[[ruby]]

if "1.9".respond_to?(:encoding)
  def prepare(string) #:nodoc:
    string.to_s.encode(Encoding::UTF_8)
  end
else
  def prepare(string) #:nodoc:
    string.to_s
  end
end

----

[[ruby]]

def entity_regexp
  key_lengths = @map.keys.map{ |k| k.length }
  entity_name_pattern =
    if @flavor == 'expanded'
      '(?:b\.)?[a-z][a-z0-9]'
    else
      '[a-z][a-z0-9]'
    end
  /&(?:(#{entity_name_pattern}{#{key_lengths.min - 1},#{key_lengths.max - 1}})
  |#([0-9]{1,7})|#x([0-9a-f]{1,6}));/i
end

----

[[ruby]]

/&(?:([a-z][a-z0-9]{1,7})|#([0-9]{1,7})|#x([0-9a-f]{1,6}));/i

def decode(source)
  prepare(source).gsub(@entity_regexp) {
    if $1 && codepoint = @map[$1]
      [codepoint].pack('U')
    elsif $2
      [$2.to_i(10)].pack('U')
    elsif $3
      [$3.to_i(16)].pack('U')
    else
      $&
    end
  }
end

